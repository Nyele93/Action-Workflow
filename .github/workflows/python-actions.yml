name: Actions for Python Project
on: 
  push:
    branches:
      - 'main'
      - 'dev-*'
      - 'feature/**'
    paths-ignore:
      - 'state_files/*'
  workflow_dispatch:
jobs: 
  deploy_python_macro:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          python-version: ['3.10', '3.9']  # Choose compatible versions
    outputs:
      script-file: ${{ steps.write_py_file.outputs.py_output_file }}
    steps:
        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
        - name: Get code
          uses: actions/checkout@v3
            #with:
        - name: setup python
          id: install-python
          uses: actions/setup-python@v4
          with: 
            python-version: ${{ matrix.python-version }}
        #----------------------------------------------
        #  -----  install & configure poetry  ---------
        #----------------------------------------------
        - name: install poetry
          uses: snok/install-poetry@v1
          with:
            version: "1.5.1"
            virtualenvs-create: true
            virtualenvs-in-project: true
            #virtualenvs-path: ~/my-custom-path
            installer-parallel: true
        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
        - name: Load cached venv
          id: cached-poetry-dependencies
          uses: actions/cache@v4
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.install-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}            
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        - name: init poetry env
          run: poetry init
        - name: Install dependencies
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          run: poetry install --no-interaction --no-root
        - name: run deploy_macro using poetry
          id: write_py_file
          run: |
            source .venv/bin/activate
            poetry completions bash >> ~/.bash_completion
            poetry run python3 deploy_macro.py
            echo "py_output.json" > 'py_output_file={}' >> $GITHUB_OUTPUT
          # poetry build
          #working-directory: "./app"
  deploy_ansible:
    needs: [deploy_python_macro]
    runs-on: ubuntu-latest
    steps:
      - name: install ansible
        run: |
          sudo apt update
          sudo apt install software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible   
          ansible_version=$(ansible --version)
          echo "installed Ansible version: $ansible_version"  
      - uses: actions/checkout@v4
      - name: Output generated py file
        run: echo "${{ needs.deploy_python_macro.outputs.script-file }}"
      #- name: install ansible-lint
      #  uses: ansible/ansible-lint@main