name: Actions for Python Project
on: 
  push:
    branches:
      - 'main'
      - 'dev-*'
      - 'feature/**'
    #branches-ignore:
    paths-ignore:
      - 'state_files/*'
  #pull_request:
    #types: 
      #- opened
      #- closed
      #- reopened
  workflow_dispatch:

env:
  POETRY_VERSION: "1.5.1"
  
jobs: 
  deploy_python_macro:
    strategy:
        fail-fast: false
        matrix:
          python-version: ['3.9','3.10']  # Choose compatible versions
          operating-system: [ubuntu-latest]
          exclude:
            - python-version: 3.8
              operating-system: ubuntu-latest
    env:
      PLAYBOOK_DIR: ./playbooks/proj_name/
    runs-on: ${{ matrix.operating-system }}
    outputs:
      script-file: ${{ steps.write_py_file.outputs.py_output_file }}
    steps:
        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
        - name: Get code
          uses: actions/checkout@v3
            #with:
        - name: setup python
          id: install-python
          uses: actions/setup-python@v4
          with: 
            python-version: ${{ matrix.python-version }}
        #----------------------------------------------
        #------  cache Poetry and dependencies  -------
        #----------------------------------------------
        - name: Cache poetry installation
          id: cached_poetry_install
          uses: actions/cache@v4
          with:
            path: ~/.cache/pypoetry
            key: poetry-cache-${{ runner.os }}-${{ steps.install-python.outputs.python-version }}-${{ env.POETRY_VERSION }}
        - name: Cache Packages
          uses: actions/cache@v3
          with:
              path: ~/.local
              key: poetry-local-${{ runner.os }}-${{ steps.install-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/*.yml') }}            
        #----------------------------------------------
        #  -----  install & configure poetry  ---------
        #----------------------------------------------
        - name: install poetry
          uses: snok/install-poetry@v1
          if: steps.cached_poetry_install.outputs.cache-hit != 'true'
          id: install_poetry
          with:
            version: ${{ env.POETRY_VERSION }}
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
            virtualenvs-path: .venv
        #---------------------------------------------------------
        #   load cached venv if cache exists using custom actions
        #---------------------------------------------------------
        - name: Load & cache dependencies
          uses: ./.github/actions/cached-deps
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        - name: init poetry env
          if: success() && ${{ steps.cached_poetry_install.outputs.cache-hit != 'true' }}
          # if:failure() & steps.install_poetry.outcome == 'failure' }}
          run: |
              poetry env use ${{ matrix.python-version }}
              poetry init --file ./pyproject.toml
              
          shell: bash
        - name: Install dependencies
          if: steps.install_poetry.outcome == 'success'
          run: |
            poetry env use ${{ matrix.python-version }}
            poetry lock --no-update --file ./pyproject.toml
            poetry install --no-interaction --no-root --file ./pyproject.toml
            echo "poetry done..."
          shell: bash          
        - name: run deploy_macro using poetry
          id: write_py_file
          run: |
            source .venv/bin/activate
            poetry completions bash >> ~/.bash_completion
            poetry run python3 deploy_macro.py
            compact_output=$(cat py_output.json | jq -c '.')
            echo "py_output_file=${compact_output}" >> $GITHUB_OUTPUT
            echo "loading workflow secret: ${{ secrets.ACTIONS_WORKFLOW_SECRET }}"
        - name: install ansible and ansible-list
          continue-on-error: true
          run: |
              source .venv/bin/activate
              poetry env use ${{ matrix.python-version }}
              poetry add ansible ansible-lint=={version = "^24.2.3", markers = "platform_system != 'Windows'"}
              #poetry add ansible==2.14 ansible-lint==6.0.0 
              ansible_version=$(ansible --version)
              ansible_lint_version=$(ansible-lint --version)
              echo "installed Ansible version: $ansible_version"  
              echo "installed Ansible Lint version: $ansible_lint_version" 
        - name: Output generated py file and playbook directory
          run: |
                echo "${{ steps.write_py_file.outputs.py_output_file }}"
                echo "playbook directory set to: ${{ env.PLAYBOOK_DIR }}"  

  deploy_clickhouse:
    strategy:
      matrix:
        clickhouse-cluster: ['production','stage2']     
    environment: ClickHouse-UAT
    #container:
      #image:
      #env: 
    #services:
      #clickhouse_service:
        #image:
        #ports:
        #  - 2489:2489
        #env:
    runs-on: ubuntu-latest
    steps:  
      - name: check set ENV vars
        run: |
          echo "loading environment secret: ${{ secrets.CH_UAT_USER_PASSWD }}"

  display_deployment_base_info:
    needs: [deploy_python_macro, deploy_clickhouse]
    if: always()
    uses: ./.github/workflows/output.yml   ## reusable workflow
    with:
      artifact-name: "${{ needs.deploy_python_macro.outputs.script-file }}"
    #secrets:
      #reusable-secret: 

  display_deployment_outcome:
    needs: display_deployment_base_info
    runs-on: ubuntu-latest
    steps:
      - name: Check output of dpeloyment
        run: echo "${{ needs.display_deployment_base_info.outputs.deployment-results }}"
        
## end of workflow.        