name: Actions for Python Project
on: 
  push:
    branches:
      - 'main'
      - 'dev-*'
      - 'feature/**'
    #branches-ignore:
    paths-ignore:
      - 'state_files/*'
  #pull_request:
    #types: 
      #- opened
      #- closed
      #- reopened
  workflow_dispatch:

env:
  POETRY_VERSION: "1.5.1"
  ACTIONS_RUNNER_DEBUG: 'true'

jobs: 
  deploy_python_macro:
    strategy:
        fail-fast: false
        matrix:
          python-version: ['3.9','3.10']  # Choose compatible versions
          operating-system: [ubuntu-latest]
          exclude:
            - python-version: 3.8
              operating-system: ubuntu-latest
    env:
      PLAYBOOK_DIR: ./playbooks/proj_name/
      PROJECT_NAME: 'python_macro_deploy'
    runs-on: ${{ matrix.operating-system }}
    outputs:
      script-file: ${{ steps.write_py_file.outputs.py_output_file }}
    steps:
        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
        - name: Get code
          uses: actions/checkout@v3
            #with:
        #- name: setup python
          #id: install-python
          #uses: actions/setup-python@v4
          #with: 
            #python-version ${{ matrix.python-version }}#
        - name: Install pyenv
          id: install_pyenv
          shell: bash
          run: |
               # install pyenv.
               curl https://pyenv.run | bash

               # set environment variables.
               echo -e "export PYENV_ROOT=${HOME}/.pyenv\nexport PATH=${HOME}/.pyenv/bin:${PATH}" >> "$GITHUB_ENV"
               PYENV_ROOT="${HOME}/.pyenv"
               PYENV_BIN=$PYENV_ROOT/bin
               echo "${PYENV_BIN}" >> "$GITHUB_PATH"
               if [ ! -d "$HOME/.pyenv/plugins/pyenv-virtualenv" ]; then
                    git clone https://github.com/pyenv/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
               fi
        - name: install python matrix using pyenv
          shell: bash
          id: install_python_matrix_using_pyenv
          run: |
               source ~/.bashrc
               eval "$(pyenv init -)" >> "$GITHUB_PATH"
               eval "$(pyenv virtualenv-init -)" >> "$GITHUB_PATH"            
               # install neccessary packages.
               sudo apt update
               sudo apt install --install-suggests -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev libgdbm-dev git 
               
               # Install specific Python version
               pyenv install ${{ matrix.python-version }} 
               python3 --version
        #----------------------------------------------
        #  -----  install & configure poetry  ---------
        #----------------------------------------------
        - name: install poetry
          id: install_poetry
          if: steps.cached_poetry_install.outputs.cache-hit != 'true'            
          run: |
                source ~/.bashrc
                curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -
                # Configure Poetry settings
                #poetry config virtualenvs.create=false
                #poetry config virtualenvs.in-project=true
                #poetry config virtualenvs.path .venv
                #poetry config installer.parallel true
        #----------------------------------------------
        #------  cache Poetry and dependencies  -------
        #----------------------------------------------
        - name: Cache poetry installation
          id: cached_poetry_install
          uses: actions/cache@v4
          with:
            path: ~/.cache/pypoetry
            key: poetry-cache-${{ runner.os }}-${{ steps.install_pyenv.outputs.python-version }}-${{ env.POETRY_VERSION }}
        - name: Cache Packages
          uses: actions/cache@v3
          with:
              path: ~/.local
              key: poetry-local-${{ runner.os }}-${{ steps.install_pyenv.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/*.yml') }}                           
        #---------------------------------------------------------
        #   load cached venv if cache exists using custom actions
        #---------------------------------------------------------
        - name: Load & cache dependencies
          uses: ./.github/actions/cached-deps
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        - name: setup poetry project, Install dependencies and run deploy_macro.py
          if: steps.install_poetry.outcome == 'success' && ${{ steps.cached_poetry_install.outputs.cache-hit != 'true' }}
          id: write_py_file
          run: |
             source ~/.bashrc
             mkdir -p ${{ env.PROJECT_NAME }}
             cd ${{ env.PROJECT_NAME }}
             pyenv install ${{ matrix.python-version }}
             pyenv local ${{ matrix.python-version }}
             poetry init
             #poetry env use {{ matrix.python-version }}
             poetry install --no-interaction --no-root
             #poetry completions bash >> ~/.bash_completion
             poetry lock --no-update
             cp deploy_macro.py "${{ env.PROJECT_NAME }}"/
             poetry run python3 deploy_macro.py
             compact_output=$(cat py_output.json | jq -c '.')
             echo "py_output_file=${compact_output}" >> $GITHUB_OUTPUT
             echo "loading workflow secret: ${{ secrets.ACTIONS_WORKFLOW_SECRET }}"
          env:
              PYENV_ROOT: ${{ github.workspace }}/.pyenv
        - name: install ansible and ansible-lint
          continue-on-error: true
          run: |
              poetry add ansible ansible-lint=={version = "^24.2.3", markers = "platform_system != 'Windows'"}
              ansible_version=$(ansible --version)
              ansible_lint_version=$(ansible-lint --version)
              echo "installed Ansible version: $ansible_version"  
              echo "installed Ansible Lint version: $ansible_lint_version" 
        - name: Output generated py file and playbook directory
          run: |
                echo "${{ steps.write_py_file.outputs.py_output_file }}"
                echo "playbook directory set to: ${{ env.PLAYBOOK_DIR }}"  

  deploy_clickhouse:
    strategy:
      matrix:
        clickhouse-cluster: ['production','stage2']     
    environment: ClickHouse-UAT
    #container:
      #image:
      #env: 
    #services:
      #clickhouse_service:
        #image:
        #ports:
        #  - 2489:2489
        #env:
    runs-on: ubuntu-latest
    steps:  
      - name: check set ENV vars
        run: |
          echo "loading environment secret: ${{ secrets.CH_UAT_USER_PASSWD }}"

  display_deployment_base_info:
    needs: [deploy_python_macro, deploy_clickhouse]
    if: always()
    uses: ./.github/workflows/output.yml   ## reusable workflow
    with:
      artifact-name: "${{ needs.deploy_python_macro.outputs.script-file }}"
    #secrets:
      #reusable-secret: 

  display_deployment_outcome:
    needs: display_deployment_base_info
    runs-on: ubuntu-latest
    steps:
      - name: Check output of dpeloyment
        run: echo "${{ needs.display_deployment_base_info.outputs.deployment-results }}"
        
## end of workflow.        