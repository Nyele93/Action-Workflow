name: Actions for Python Project
on: 
  push:
    branches:
      - 'main'
      - 'dev-*'
      - 'feature/**'
    #branches-ignore:
    paths-ignore:
      - 'state_files/*'
  #pull_request:
    #types: 
      #- opened
      #- closed
      #- reopened
  workflow_dispatch:

env:
  POETRY_VERSION: "1.5.1"
  ACTIONS_RUNNER_DEBUG: 'true'
  PLAYBOOK_DIR: ./playbooks/proj_name/
  PROJECT_NAME: 'python_macro_deploy'
  USE_CACHE: true

jobs: 
  deploy_python_macro:
    strategy:
        fail-fast: false
        matrix:
          python-version: ['3.9','3.10']  # Choose compatible versions
          operating-system: [ubuntu-latest]
          exclude:
            - python-version: 3.8
              operating-system: ubuntu-latest
    environment: deploy_prod
    runs-on: ${{ matrix.operating-system }}           
    outputs:
       cache_result: ${{ steps.cached_dependencies.outputs.cache-hit }}
       script-file: ${{ steps.write_py_file.outputs.py_output_file }}
       python_version:
       poetry_version: 
    steps:
        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
        - name: Get code
          uses: actions/checkout@v3
        - name: Install pyenv
          id: install_pyenv
          shell: bash
          run: |
               # install pyenv.
               curl https://pyenv.run | bash

               # set environment variables.
               echo -e "export PYENV_ROOT=${HOME}/.pyenv\nexport PATH=${HOME}/.pyenv/bin:${PATH}" >> "$GITHUB_ENV"
               PYENV_ROOT="${HOME}/.pyenv"
               PYENV_BIN=$PYENV_ROOT/bin
               echo "${PYENV_BIN}" >> "$GITHUB_PATH"
               if [ ! -d "$HOME/.pyenv/plugins/pyenv-virtualenv" ]; then
                    git clone https://github.com/pyenv/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
               fi
        - name: install python matrix using pyenv
          shell: bash
          id: install_python_matrix_using_pyenv
          run: |
               source ~/.bashrc
               eval "$(pyenv init -)" >> "$GITHUB_PATH"
               eval "$(pyenv virtualenv-init -)" >> "$GITHUB_PATH"            
               # install neccessary packages.
               sudo apt update
               sudo apt install --install-suggests -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev libgdbm-dev git 
               
               # Install specific Python version
               pyenv install ${{ matrix.python-version }}
        #-----------------------------------------------------
        # using custom action.continue-on-error
        #-----------------------------------------------------
        - name: Using custom action
          uses: ./.github/actions/custom_deploy_actions

        - name: Cache poetry installation
          id: cached_poetry_install
          uses: actions/cache@v4
          with:
              path: ~/.cache/pypoetry
              key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.poetry_version }}

        - name: Cache Packages
          id: cached_dependencies
          uses: actions/cache@v4
          with:
              path: ~/.local
              key: poetry-local-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/*.yml') }}
        #----------------------------------------------
        #  -----  install & configure poetry  ---------
        #----------------------------------------------
        - name: install poetry
          id: install_poetry
          if: ${{ steps.cached_dependencies.outputs.cache-hit }} != 'true' && ${{ env.USE_CACHE }} is true
          run: |
                source ~/.bashrc
                curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -            
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        - name: setup poetry project, Install dependencies and run deploy_macro.py
          id: write_py_file
          run: |
             source ~/.bashrc
             mkdir -p $PROJECT_NAME
             cp ./deploy_macro.py "${{ env.PROJECT_NAME }}"/
             cd ${{ env.PROJECT_NAME }}
             pyenv install ${{ matrix.python-version }}
             pyenv local ${{ matrix.python-version }}
             poetry init -q
             poetry env use $(pyenv which python)
             poetry install --no-interaction --no-root
             cp ./pyproject.toml "${{ env.PROJECT_NAME }}"/
             poetry lock --no-update
             cat pyproject.toml
             poetry run python3 deploy_macro.py
             compact_output=$(cat py_output.json | jq -c '.')
             echo "py_output_file=${compact_output}" >> $GITHUB_OUTPUT
             echo "loading workflow secret: ${{ secrets.ACTIONS_WORKFLOW_SECRET }}"
          env:
              PYENV_ROOT: ${{ github.workspace }}/.pyenv
        - name: install ansible and ansible-lint
          continue-on-error: false
          run: |
              source ~/.bashrc
              cd ${{ env.PROJECT_NAME }}
              pyenv local ${{ matrix.python-version }}
              poetry config installer.parallel true
              poetry config installer.max-workers 5
              poetry config virtualenvs.in-project true
              poetry config virtualenvs.prefer-active-python true
              poetry env use $(pyenv which python)
              ##source $(poetry env info --path)/bin/activate##
              poetry install --no-interaction --no-root
              poetry show
              ansible_version=$(poetry run ansible --version)
              #ansible_lint_version=$(poetry run ansible-lint --version)
              echo "installed Ansible version: $ansible_version"  
              #echo "installed Ansible Lint version: $ansible_lint_version" 
        - name: Output generated py file and playbook directory
          continue-on-error: true
          run: |
                echo "${{ steps.write_py_file.outputs.py_output_file }}"
                echo "playbook directory set to: ${{ env.PLAYBOOK_DIR }}"  

  deploy_clickhouse:
    strategy:
      matrix:
        clickhouse-cluster: ['production','stage2']     
    environment: ClickHouse-UAT
    #container:
      #image:
      #env: 
    #services:
      #clickhouse_service:
        #image:
        #ports:
        #  - 2489:2489
        #env:
    runs-on: ubuntu-latest
    steps:  
      - name: check set ENV vars
        run: |
          echo "loading environment secret: ${{ secrets.CH_UAT_USER_PASSWD }}"

  check_caching_info:
    needs: [deploy_python_macro]
    if: always()
    uses: ./.github/workflows/poetry_dependency_caching.yml   ## reusable workflow
    with:
      caching: ${{ needs.deploy_python_macro.outputs.cache_result}}
      python_version: ${{ needs.deploy_python_macro.outputs.python_version }}
      poetry_version: ${{ needs.deploy_python_macro.outputs.poetry_version }}

  display_deployment_base_info:
    needs: [deploy_python_macro, deploy_clickhouse]
    if: always()
    uses: ./.github/workflows/output.yml   ## reusable workflow
    with:
      artifact-name: "${{ needs.deploy_python_macro.outputs.script-file }}"
    #secrets:
      #reusable-secret: 

  display_deployment_outcome:
    needs: display_deployment_base_info
    runs-on: ubuntu-latest
    steps:
      - name: Check output of dpeloyment
        run: echo "${{ needs.display_deployment_base_info.outputs.deployment-results }}"
        
## end of workflow.        